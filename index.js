import { Client, GatewayIntentBits, EmbedBuilder } from "discord.js";
import cron from "node-cron";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";

dotenv.config();
const MAX_RANGE_DAYS = 30; // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30 ‡∏ß‡∏±‡∏ô‡πÅ‡∏ö‡∏ö inclusive

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
    ],
});

const TOKEN = process.env.DISCORD_TOKEN;
const DONKEY_DAY_CHANNEL = process.env.DONKEY_DAY_CHANNEL;
const REPORT_CHANNEL = process.env.REPORT_CHANNEL;
const TZ = process.env.TIMEZONE || "Asia/Bangkok";
const DATA_FILE = process.env.DATA_FILE || "./data/leaveData.json";

// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö: { "25/08/25": [ {name, reason, user, text} ] }
let leaveMessages = {};

// ---------- Persistence (load/save) ----------
function ensureDirFor(filePath) {
    const dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
}

function loadFromDisk() {
    try {
        ensureDirFor(DATA_FILE);
        if (!fs.existsSync(DATA_FILE)) {
            leaveMessages = {};
            fs.writeFileSync(DATA_FILE, JSON.stringify(leaveMessages, null, 2));
            return;
        }
        const raw = fs.readFileSync(DATA_FILE, "utf-8");
        leaveMessages = JSON.parse(raw || "{}");
        if (typeof leaveMessages !== "object" || Array.isArray(leaveMessages)) {
            // ‡∏Å‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏±‡∏á
            leaveMessages = {};
        }
        console.log("üì¶ Loaded leave data from disk.");
    } catch (e) {
        console.error("Failed to load data file, starting empty:", e);
        leaveMessages = {};
    }
}

let saveInFlight = false;
let pendingSave = false;

async function saveToDisk() {
    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö atomic: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÅ‡∏•‡πâ‡∏ß rename ‡∏ó‡∏±‡∏ö
    if (saveInFlight) {
        pendingSave = true;
        return;
    }
    saveInFlight = true;
    try {
        ensureDirFor(DATA_FILE);
        const tmpPath = DATA_FILE + ".tmp";
        await fs.promises.writeFile(tmpPath, JSON.stringify(leaveMessages, null, 2), "utf-8");
        await fs.promises.rename(tmpPath, DATA_FILE);
        // console.log("üíæ Saved leave data.");
    } catch (e) {
        console.error("Failed to save data:", e);
    } finally {
        saveInFlight = false;
        if (pendingSave) {
            pendingSave = false;
            // fire-and-forget
            saveToDisk();
        }
    }
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
loadFromDisk();

// ---------- Regex / Utils ----------
const singleDateRegex = /\b([0-2]\d|3[0-1])\/(0\d|1[0-2])\/\d{2}\b/;
const rangeRegex = /\b([0-2]\d|3[0-1])\/(0\d|1[0-2])\/\d{2}\s*-\s*([0-2]\d|3[0-1])\/(0\d|1[0-2])\/\d{2}\b/;

function yyToYYYY(yy) {
    return 2000 + Number(yy);
}
function parseDDMMYY(s) {
    const [dd, mm, yy] = s.split("/").map((x) => parseInt(x, 10));
    return new Date(yyToYYYY(yy), mm - 1, dd);
}
function fmtDDMMYY(d) {
    const dd = String(d.getDate()).padStart(2, "0");
    const mm = String(d.getMonth() + 1).padStart(2, "0");
    const yy = String(d.getFullYear()).slice(-2);
    return `${dd}/${mm}/${yy}`;
}
function startOfDay(d) {
    const x = new Date(d);
    x.setHours(0, 0, 0, 0);
    return x;
}
function iterateDaysInclusive(start, end) {
    const days = [];
    let cur = startOfDay(start);
    const last = startOfDay(end);
    while (cur <= last) {
        days.push(new Date(cur));
        cur.setDate(cur.getDate() + 1);
    }
    return days;
}

// ---------- Message Handler ----------
client.on("messageCreate", async (message) => {
    if (message.channelId !== DONKEY_DAY_CHANNEL || message.author.bot) return;

    const content = message.content.trim();

    // ===================
    // !help
    // ===================
    if (content === "!help") {
        const helpText = `
**üìò ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ**
\`!help\` - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó
\`!leaves\` - ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ

**üì• ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡∏•‡∏≤**
- ‡∏•‡∏≤‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: \`‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• dd/mm/yy\`
  ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: \`‡∏õ‡∏±‡∏á ‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢ 26/08/25\`
  
- ‡∏•‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô: \`‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• dd/mm/yy-dd/mm/yy\`
  ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: \`‡∏ï‡∏π‡∏ô ‡∏•‡∏≤‡∏Å‡∏¥‡∏à 25/08/25-27/08/25\`
  
**‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**
- ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà **‡∏ä‡∏∑‡πà‡∏≠**, **‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•**, ‡πÅ‡∏•‡∏∞ **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà**
- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏î‡∏µ‡∏ï
- ‡∏ä‡πà‡∏ß‡∏á‡∏•‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Å‡∏¥‡∏ô ${MAX_RANGE_DAYS} ‡∏ß‡∏±‡∏ô
`;
        await message.reply(helpText);
        return;
    }

    // ===================
    // !leaves
    // ===================
    if (content === "!leaves") {
        if (Object.keys(leaveMessages).length === 0) {
            await message.reply("üìÇ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ");
            return;
        }

        let report = "üìã **‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)**\n";
        const sortedDates = Object.keys(leaveMessages).sort((a, b) => {
            // ‡πÅ‡∏õ‡∏•‡∏á dd/mm/yy ‡πÄ‡∏õ‡πá‡∏ô date object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á
            const [da, ma, ya] = a.split("/").map(Number);
            const [db, mb, yb] = b.split("/").map(Number);
            return new Date(2000 + ya, ma - 1, da) - new Date(2000 + yb, mb - 1, db);
        });

        for (const dateKey of sortedDates) {
            report += `\nüìÖ ${dateKey}\n`;
            leaveMessages[dateKey].forEach((entry, i) => {
                report += `${i + 1}. ${entry.name} (${entry.user}) - ${entry.reason}\n`;
            });
        }

        await message.reply(report.length > 2000 ? "üìÇ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ!" : report);
        return;
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ "-" ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î: "25/08/25-27/08" (‡∏Ç‡∏≤‡∏î‡∏õ‡∏µ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á), "25/08/25 - 27/8/25" (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏ß‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å)
    if (content.includes("-") && !rangeRegex.test(content)) {
        await message.reply(
            "‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö `dd/mm/yy-dd/mm/yy` ‡πÄ‡∏ä‡πà‡∏ô: `‡∏ï‡∏π‡∏ô ‡∏•‡∏≤‡∏Å‡∏¥‡∏à 25/08/25-27/08/25`"
        );
        return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    const rangeMatch = content.match(rangeRegex);
    let dates = [];

    if (rangeMatch) {
        const matchedDateText = rangeMatch[0];
        const [leftRaw, rightRaw] = matchedDateText.split("-").map((s) => s.trim());

        const start = parseDDMMYY(leftRaw);
        const end = parseDDMMYY(rightRaw);
        const today = startOfDay(new Date());

        if (isNaN(start) || isNaN(end)) {
            await message.reply("‚ö†Ô∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö `dd/mm/yy-dd/mm/yy`");
            return;
        }
        if (start > end) {
            await message.reply("‚ö†Ô∏è ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î)");
            return;
        }
        if (start < today) {
            await message.reply("‚ö†Ô∏è ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï");
            return;
        }
        // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡πà‡∏ß‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 14 ‡∏ß‡∏±‡∏ô (inclusive)
        const days = iterateDaysInclusive(start, end);
        if (days.length > MAX_RANGE_DAYS) {
            await message.reply(`‚ö†Ô∏è ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${MAX_RANGE_DAYS} ‡∏ß‡∏±‡∏ô) ‚Äî ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ${days.length} ‡∏ß‡∏±‡∏ô`);
            return;
        }

        dates = days.map(fmtDDMMYY);

    } else {
        // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ä‡πà‡∏ß‡∏á ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        const single = content.match(singleDateRegex);
        if (!single) {
            await message.reply(
                "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö `dd/mm/yy` ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏ß‡∏á `dd/mm/yy-dd/mm/yy` ‡πÄ‡∏ä‡πà‡∏ô: `‡∏õ‡∏±‡∏á ‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢ 25/08/25` ‡∏´‡∏£‡∏∑‡∏≠ `‡∏ï‡∏π‡∏ô ‡∏•‡∏≤‡∏Å‡∏¥‡∏à 25/08/25-27/08/25`"
            );
            return;
        }
        const d = parseDDMMYY(single[0]);
        const today = startOfDay(new Date());
        if (d < today) {
            await message.reply(`‚ö†Ô∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${single[0]} ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï`);
            return;
        }
        dates = [fmtDDMMYY(d)];
    }

    // ‡∏ï‡∏±‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠ + ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
    const textWithoutDate = content.replace(rangeRegex, "").replace(singleDateRegex, "").trim();
    const parts = textWithoutDate.split(/\s+/);

    if (parts.length < 2) {
        await message.reply(
            "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô: `‡∏õ‡∏±‡∏á ‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢ 25/08/25` ‡∏´‡∏£‡∏∑‡∏≠ `‡∏õ‡∏±‡∏á ‡∏•‡∏≤‡∏Å‡∏¥‡∏à 25/08/25-27/08/25`"
        );
        return;
    }

    const name = parts[0];
    const reason = parts.slice(1).join(" ");

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ dates + save
    for (const dateKey of dates) {
        if (!leaveMessages[dateKey]) leaveMessages[dateKey] = [];
        leaveMessages[dateKey].push({
            name,
            reason,
            user: message.author.username,
            text: content,
        });
    }
    await saveToDisk();

    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏Ç‡∏≠ (Embed)
    const embed = new EmbedBuilder()
        .setTitle("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        .addFields(
            { name: "‡∏ä‡∏∑‡πà‡∏≠", value: name, inline: true },
            { name: "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•", value: reason, inline: true },
            {
                name: dates.length > 1 ? "‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤" : "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤",
                value: dates.length > 1 ? `${dates[0]} - ${dates[dates.length - 1]} (${dates.length} ‡∏ß‡∏±‡∏ô)` : dates[0],
            }
        )
        .setTimestamp(new Date())
        .setColor(0x22c55e);

    await message.reply({ embeds: [embed] });
});

// ---------- Daily Report ----------
async function sendDailyReport() {
    try {
        const channel = await client.channels.fetch(REPORT_CHANNEL);

        const now = new Date(); // cron ‡∏Ñ‡∏∏‡∏° timezone ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß
        const dd = String(now.getDate()).padStart(2, "0");
        const mm = String(now.getMonth() + 1).padStart(2, "0");
        const yy = String(now.getFullYear()).slice(-2);
        const todayKey = `${dd}/${mm}/${yy}`;

        const todayLeaves = leaveMessages[todayKey] || [];
        if (todayLeaves.length === 0) return;

        let report = `üìã ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏≤ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${todayKey}\n\n`;
        todayLeaves.forEach((msg, i) => {
            report += `${i + 1}. ${msg.name} (${msg.user}) - ${msg.reason}\n`;
        });

        await channel.send(report);

        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        delete leaveMessages[todayKey];
        await saveToDisk();
    } catch (err) {
        console.error("Error sending report:", err);
    }
}

// ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 9 ‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤‡∏ï‡∏≤‡∏° TIMEZONE
cron.schedule("0 9 * * *", () => sendDailyReport(), { timezone: TZ });

client.once("ready", () => {
    console.log(`‚úÖ Logged in as ${client.user.tag}`);
});

client.login(TOKEN);

// ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ã‡∏ü‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
process.on("SIGINT", async () => {
    console.log("\nReceived SIGINT, saving data...");
    await saveToDisk();
    process.exit(0);
});
process.on("SIGTERM", async () => {
    console.log("Received SIGTERM, saving data...");
    await saveToDisk();
    process.exit(0);
});
